//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace DataSample {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("DataSet1")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class DataSet1 : System.Data.DataSet {
        
        private EMPDataTable tableEMP;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DataSet1() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected DataSet1(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["EMP"] != null)) {
                    base.Tables.Add(new EMPDataTable(ds.Tables["EMP"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EMPDataTable EMP {
            get {
                return this.tableEMP;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            DataSet1 cln = ((DataSet1)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["EMP"] != null)) {
                    base.Tables.Add(new EMPDataTable(ds.Tables["EMP"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableEMP = ((EMPDataTable)(base.Tables["EMP"]));
            if ((initTable == true)) {
                if ((this.tableEMP != null)) {
                    this.tableEMP.InitVars();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "DataSet1";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DataSet1.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableEMP = new EMPDataTable();
            base.Tables.Add(this.tableEMP);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEMP() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            DataSet1 ds = new DataSet1();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void EMPRowChangeEventHandler(object sender, EMPRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class EMPDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnEMPNO;
            
            private System.Data.DataColumn columnENAME;
            
            private System.Data.DataColumn columnJOB;
            
            private System.Data.DataColumn columnMGR;
            
            private System.Data.DataColumn columnHIREDATE;
            
            private System.Data.DataColumn columnSAL;
            
            private System.Data.DataColumn columnCOMM;
            
            private System.Data.DataColumn columnDEPTNO;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EMPDataTable() {
                this.TableName = "EMP";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EMPDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected EMPDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EMPNOColumn {
                get {
                    return this.columnEMPNO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ENAMEColumn {
                get {
                    return this.columnENAME;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn JOBColumn {
                get {
                    return this.columnJOB;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MGRColumn {
                get {
                    return this.columnMGR;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn HIREDATEColumn {
                get {
                    return this.columnHIREDATE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SALColumn {
                get {
                    return this.columnSAL;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn COMMColumn {
                get {
                    return this.columnCOMM;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DEPTNOColumn {
                get {
                    return this.columnDEPTNO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EMPRow this[int index] {
                get {
                    return ((EMPRow)(this.Rows[index]));
                }
            }
            
            public event EMPRowChangeEventHandler EMPRowChanging;
            
            public event EMPRowChangeEventHandler EMPRowChanged;
            
            public event EMPRowChangeEventHandler EMPRowDeleting;
            
            public event EMPRowChangeEventHandler EMPRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEMPRow(EMPRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EMPRow AddEMPRow(decimal EMPNO, string ENAME, string JOB, decimal MGR, System.DateTime HIREDATE, decimal SAL, decimal COMM, decimal DEPTNO) {
                EMPRow rowEMPRow = ((EMPRow)(this.NewRow()));
                rowEMPRow.ItemArray = new object[] {
                        EMPNO,
                        ENAME,
                        JOB,
                        MGR,
                        HIREDATE,
                        SAL,
                        COMM,
                        DEPTNO};
                this.Rows.Add(rowEMPRow);
                return rowEMPRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EMPRow FindByEMPNO(decimal EMPNO) {
                return ((EMPRow)(this.Rows.Find(new object[] {
                            EMPNO})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                EMPDataTable cln = ((EMPDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new EMPDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEMPNO = base.Columns["EMPNO"];
                this.columnENAME = base.Columns["ENAME"];
                this.columnJOB = base.Columns["JOB"];
                this.columnMGR = base.Columns["MGR"];
                this.columnHIREDATE = base.Columns["HIREDATE"];
                this.columnSAL = base.Columns["SAL"];
                this.columnCOMM = base.Columns["COMM"];
                this.columnDEPTNO = base.Columns["DEPTNO"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEMPNO = new System.Data.DataColumn("EMPNO", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnEMPNO);
                this.columnENAME = new System.Data.DataColumn("ENAME", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnENAME);
                this.columnJOB = new System.Data.DataColumn("JOB", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnJOB);
                this.columnMGR = new System.Data.DataColumn("MGR", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMGR);
                this.columnHIREDATE = new System.Data.DataColumn("HIREDATE", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnHIREDATE);
                this.columnSAL = new System.Data.DataColumn("SAL", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSAL);
                this.columnCOMM = new System.Data.DataColumn("COMM", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMM);
                this.columnDEPTNO = new System.Data.DataColumn("DEPTNO", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDEPTNO);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnEMPNO}, true));
                this.columnEMPNO.AllowDBNull = false;
                this.columnEMPNO.Unique = true;
                this.columnENAME.MaxLength = 10;
                this.columnJOB.MaxLength = 9;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EMPRow NewEMPRow() {
                return ((EMPRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new EMPRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(EMPRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EMPRowChanged != null)) {
                    this.EMPRowChanged(this, new EMPRowChangeEvent(((EMPRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EMPRowChanging != null)) {
                    this.EMPRowChanging(this, new EMPRowChangeEvent(((EMPRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EMPRowDeleted != null)) {
                    this.EMPRowDeleted(this, new EMPRowChangeEvent(((EMPRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EMPRowDeleting != null)) {
                    this.EMPRowDeleting(this, new EMPRowChangeEvent(((EMPRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEMPRow(EMPRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EMPDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class EMPRow : System.Data.DataRow {
            
            private EMPDataTable tableEMP;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EMPRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEMP = ((EMPDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal EMPNO {
                get {
                    return ((decimal)(this[this.tableEMP.EMPNOColumn]));
                }
                set {
                    this[this.tableEMP.EMPNOColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ENAME {
                get {
                    try {
                        return ((string)(this[this.tableEMP.ENAMEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ENAME\' in table \'EMP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEMP.ENAMEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string JOB {
                get {
                    try {
                        return ((string)(this[this.tableEMP.JOBColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'JOB\' in table \'EMP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEMP.JOBColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MGR {
                get {
                    try {
                        return ((decimal)(this[this.tableEMP.MGRColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'MGR\' in table \'EMP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEMP.MGRColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime HIREDATE {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableEMP.HIREDATEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'HIREDATE\' in table \'EMP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEMP.HIREDATEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal SAL {
                get {
                    try {
                        return ((decimal)(this[this.tableEMP.SALColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SAL\' in table \'EMP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEMP.SALColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal COMM {
                get {
                    try {
                        return ((decimal)(this[this.tableEMP.COMMColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'COMM\' in table \'EMP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEMP.COMMColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal DEPTNO {
                get {
                    try {
                        return ((decimal)(this[this.tableEMP.DEPTNOColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DEPTNO\' in table \'EMP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEMP.DEPTNOColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsENAMENull() {
                return this.IsNull(this.tableEMP.ENAMEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetENAMENull() {
                this[this.tableEMP.ENAMEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsJOBNull() {
                return this.IsNull(this.tableEMP.JOBColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetJOBNull() {
                this[this.tableEMP.JOBColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMGRNull() {
                return this.IsNull(this.tableEMP.MGRColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMGRNull() {
                this[this.tableEMP.MGRColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHIREDATENull() {
                return this.IsNull(this.tableEMP.HIREDATEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHIREDATENull() {
                this[this.tableEMP.HIREDATEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSALNull() {
                return this.IsNull(this.tableEMP.SALColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSALNull() {
                this[this.tableEMP.SALColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCOMMNull() {
                return this.IsNull(this.tableEMP.COMMColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCOMMNull() {
                this[this.tableEMP.COMMColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDEPTNONull() {
                return this.IsNull(this.tableEMP.DEPTNOColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDEPTNONull() {
                this[this.tableEMP.DEPTNOColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class EMPRowChangeEvent : System.EventArgs {
            
            private EMPRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EMPRowChangeEvent(EMPRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EMPRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace DataSample.DataSet1TableAdapters {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class EMPTableAdapter : System.ComponentModel.Component {
        
        private System.Data.OracleClient.OracleDataAdapter _adapter;
        
        private System.Data.OracleClient.OracleConnection _connection;
        
        private System.Data.OracleClient.OracleCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public EMPTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.OracleClient.OracleDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.OracleClient.OracleConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.OracleClient.OracleCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.OracleClient.OracleCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.OracleClient.OracleDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "EMP";
            tableMapping.ColumnMappings.Add("EMPNO", "EMPNO");
            tableMapping.ColumnMappings.Add("ENAME", "ENAME");
            tableMapping.ColumnMappings.Add("JOB", "JOB");
            tableMapping.ColumnMappings.Add("MGR", "MGR");
            tableMapping.ColumnMappings.Add("HIREDATE", "HIREDATE");
            tableMapping.ColumnMappings.Add("SAL", "SAL");
            tableMapping.ColumnMappings.Add("COMM", "COMM");
            tableMapping.ColumnMappings.Add("DEPTNO", "DEPTNO");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.OracleClient.OracleCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM ""SCOTT"".""EMP"" WHERE ((""EMPNO"" = :Original_EMPNO) AND ((:IsNull_ENAME = 1 AND ""ENAME"" IS NULL) OR (""ENAME"" = :Original_ENAME)) AND ((:IsNull_JOB = 1 AND ""JOB"" IS NULL) OR (""JOB"" = :Original_JOB)) AND ((:IsNull_MGR = 1 AND ""MGR"" IS NULL) OR (""MGR"" = :Original_MGR)) AND ((:IsNull_HIREDATE = 1 AND ""HIREDATE"" IS NULL) OR (""HIREDATE"" = :Original_HIREDATE)) AND ((:IsNull_SAL = 1 AND ""SAL"" IS NULL) OR (""SAL"" = :Original_SAL)) AND ((:IsNull_COMM = 1 AND ""COMM"" IS NULL) OR (""COMM"" = :Original_COMM)) AND ((:IsNull_DEPTNO = 1 AND ""DEPTNO"" IS NULL) OR (""DEPTNO"" = :Original_DEPTNO)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_EMPNO", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "EMPNO", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("IsNull_ENAME", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "ENAME", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_ENAME", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "ENAME", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("IsNull_JOB", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "JOB", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_JOB", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "JOB", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("IsNull_MGR", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "MGR", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_MGR", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "MGR", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("IsNull_HIREDATE", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "HIREDATE", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_HIREDATE", System.Data.OracleClient.OracleType.DateTime, 0, System.Data.ParameterDirection.Input, "HIREDATE", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("IsNull_SAL", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "SAL", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_SAL", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "SAL", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("IsNull_COMM", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "COMM", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_COMM", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "COMM", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("IsNull_DEPTNO", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "DEPTNO", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_DEPTNO", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "DEPTNO", System.Data.DataRowVersion.Original, false, null));
            this._adapter.InsertCommand = new System.Data.OracleClient.OracleCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO \"SCOTT\".\"EMP\" (\"EMPNO\", \"ENAME\", \"JOB\", \"MGR\", \"HIREDATE\", \"SAL\", \"CO" +
                "MM\", \"DEPTNO\") VALUES (:EMPNO, :ENAME, :JOB, :MGR, :HIREDATE, :SAL, :COMM, :DEPT" +
                "NO)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("EMPNO", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "EMPNO", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("ENAME", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "ENAME", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("JOB", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "JOB", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("MGR", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "MGR", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("HIREDATE", System.Data.OracleClient.OracleType.DateTime, 0, System.Data.ParameterDirection.Input, "HIREDATE", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("SAL", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "SAL", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("COMM", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "COMM", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("DEPTNO", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "DEPTNO", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand = new System.Data.OracleClient.OracleCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE ""SCOTT"".""EMP"" SET ""EMPNO"" = :EMPNO, ""ENAME"" = :ENAME, ""JOB"" = :JOB, ""MGR"" = :MGR, ""HIREDATE"" = :HIREDATE, ""SAL"" = :SAL, ""COMM"" = :COMM, ""DEPTNO"" = :DEPTNO WHERE ((""EMPNO"" = :Original_EMPNO) AND ((:IsNull_ENAME = 1 AND ""ENAME"" IS NULL) OR (""ENAME"" = :Original_ENAME)) AND ((:IsNull_JOB = 1 AND ""JOB"" IS NULL) OR (""JOB"" = :Original_JOB)) AND ((:IsNull_MGR = 1 AND ""MGR"" IS NULL) OR (""MGR"" = :Original_MGR)) AND ((:IsNull_HIREDATE = 1 AND ""HIREDATE"" IS NULL) OR (""HIREDATE"" = :Original_HIREDATE)) AND ((:IsNull_SAL = 1 AND ""SAL"" IS NULL) OR (""SAL"" = :Original_SAL)) AND ((:IsNull_COMM = 1 AND ""COMM"" IS NULL) OR (""COMM"" = :Original_COMM)) AND ((:IsNull_DEPTNO = 1 AND ""DEPTNO"" IS NULL) OR (""DEPTNO"" = :Original_DEPTNO)))";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("EMPNO", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "EMPNO", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("ENAME", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "ENAME", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("JOB", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "JOB", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("MGR", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "MGR", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("HIREDATE", System.Data.OracleClient.OracleType.DateTime, 0, System.Data.ParameterDirection.Input, "HIREDATE", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("SAL", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "SAL", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("COMM", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "COMM", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("DEPTNO", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "DEPTNO", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_EMPNO", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "EMPNO", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("IsNull_ENAME", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "ENAME", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_ENAME", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "ENAME", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("IsNull_JOB", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "JOB", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_JOB", System.Data.OracleClient.OracleType.VarChar, 0, System.Data.ParameterDirection.Input, "JOB", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("IsNull_MGR", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "MGR", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_MGR", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "MGR", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("IsNull_HIREDATE", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "HIREDATE", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_HIREDATE", System.Data.OracleClient.OracleType.DateTime, 0, System.Data.ParameterDirection.Input, "HIREDATE", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("IsNull_SAL", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "SAL", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_SAL", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "SAL", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("IsNull_COMM", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "COMM", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_COMM", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "COMM", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("IsNull_DEPTNO", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "DEPTNO", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_DEPTNO", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "DEPTNO", System.Data.DataRowVersion.Original, false, null));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.OracleClient.OracleConnection();
            this._connection.ConnectionString = global::DataSample.Properties.Settings.Default.ConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.OracleClient.OracleCommand[1];
            this._commandCollection[0] = new System.Data.OracleClient.OracleCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO FROM SCOTT.EMP";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet1.EMPDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet1.EMPDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet1.EMPDataTable dataTable = new DataSet1.EMPDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1.EMPDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1 dataSet) {
            return this.Adapter.Update(dataSet, "EMP");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(decimal Original_EMPNO, string Original_ENAME, string Original_JOB, System.Nullable<decimal> Original_MGR, System.Nullable<System.DateTime> Original_HIREDATE, System.Nullable<decimal> Original_SAL, System.Nullable<decimal> Original_COMM, System.Nullable<decimal> Original_DEPTNO) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((decimal)(Original_EMPNO));
            if ((Original_ENAME == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_ENAME));
            }
            if ((Original_JOB == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_JOB));
            }
            if ((Original_MGR.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((decimal)(Original_MGR.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = System.DBNull.Value;
            }
            if ((Original_HIREDATE.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((System.DateTime)(Original_HIREDATE.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = System.DBNull.Value;
            }
            if ((Original_SAL.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((decimal)(Original_SAL.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = System.DBNull.Value;
            }
            if ((Original_COMM.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((decimal)(Original_COMM.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = System.DBNull.Value;
            }
            if ((Original_DEPTNO.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((decimal)(Original_DEPTNO.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(decimal EMPNO, string ENAME, string JOB, System.Nullable<decimal> MGR, System.Nullable<System.DateTime> HIREDATE, System.Nullable<decimal> SAL, System.Nullable<decimal> COMM, System.Nullable<decimal> DEPTNO) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((decimal)(EMPNO));
            if ((ENAME == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(ENAME));
            }
            if ((JOB == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(JOB));
            }
            if ((MGR.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((decimal)(MGR.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            if ((HIREDATE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((System.DateTime)(HIREDATE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((SAL.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((decimal)(SAL.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = System.DBNull.Value;
            }
            if ((COMM.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((decimal)(COMM.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = System.DBNull.Value;
            }
            if ((DEPTNO.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((decimal)(DEPTNO.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    decimal EMPNO, 
                    string ENAME, 
                    string JOB, 
                    System.Nullable<decimal> MGR, 
                    System.Nullable<System.DateTime> HIREDATE, 
                    System.Nullable<decimal> SAL, 
                    System.Nullable<decimal> COMM, 
                    System.Nullable<decimal> DEPTNO, 
                    decimal Original_EMPNO, 
                    string Original_ENAME, 
                    string Original_JOB, 
                    System.Nullable<decimal> Original_MGR, 
                    System.Nullable<System.DateTime> Original_HIREDATE, 
                    System.Nullable<decimal> Original_SAL, 
                    System.Nullable<decimal> Original_COMM, 
                    System.Nullable<decimal> Original_DEPTNO) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((decimal)(EMPNO));
            if ((ENAME == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(ENAME));
            }
            if ((JOB == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(JOB));
            }
            if ((MGR.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((decimal)(MGR.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = System.DBNull.Value;
            }
            if ((HIREDATE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((System.DateTime)(HIREDATE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((SAL.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((decimal)(SAL.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = System.DBNull.Value;
            }
            if ((COMM.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((decimal)(COMM.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = System.DBNull.Value;
            }
            if ((DEPTNO.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((decimal)(DEPTNO.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[8].Value = ((decimal)(Original_EMPNO));
            if ((Original_ENAME == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[10].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Original_ENAME));
            }
            if ((Original_JOB == null)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[12].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Original_JOB));
            }
            if ((Original_MGR.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[14].Value = ((decimal)(Original_MGR.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[14].Value = System.DBNull.Value;
            }
            if ((Original_HIREDATE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[16].Value = ((System.DateTime)(Original_HIREDATE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[16].Value = System.DBNull.Value;
            }
            if ((Original_SAL.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[18].Value = ((decimal)(Original_SAL.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[18].Value = System.DBNull.Value;
            }
            if ((Original_COMM.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[20].Value = ((decimal)(Original_COMM.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[20].Value = System.DBNull.Value;
            }
            if ((Original_DEPTNO.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[22].Value = ((decimal)(Original_DEPTNO.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[22].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
}

#pragma warning restore 1591